# -*- coding: utf-8 -*-
"""IPL Past Matches DataMining.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sdZhnoT8xhQin_Hond8aHMcPxiyC6mhD

## **DATA MINING AND WAREHOUSING PROJECT**
## TOPIC: IPL PAST MATCHES DATA MINING

    By:
        Vedant.D.Mulherkar   BE Roll_no:06  Div-B
        Avinash Mankar       BE Roll_no:05  Div-B
        Ganesh Vispute       BE Roll_no:14  Div-B
"""

import pandas as pd                           ## For data manipulation
      
import seaborn as sns                         ##For data visualization

"""Storing the details from the ipl datasets to an object called ipl"""

ipl=pd.read_csv('ipl data.csv')

"""This is how we open our datasets

Now if we want to see our datasets
"""

ipl.head()

#Looking for the number of rows and columns in the datasets
ipl.shape

#Getting the frequency of most man of the match awards:
ipl['player_of_match'].value_counts()

#If we only want top 10 players name who won most of the man of the match
ipl['player_of_match'].value_counts()[0:10]

# If we only want top 5 players name who won most man of the matchs:
ipl['player_of_match'].value_counts()[0:5]

"""# BAR PLOT
If we want to plot bar plot of the top 5 players with most man of the match players :
Where in bar plot in the first parameter it has the categorical values and in the second parameter it has the numerical values, with the use of matplotlab we plot a bar plot  
"""

list(ipl['player_of_match'].value_counts()[0:5].keys()) 
#Get the name of the player inside the list where the .keys() gives you only name

"""## This will specifies the dimentions of the figure of the plot

##This has two parameter one get categorical parameters so we pass it name of the players and in the second paramter we pass integers that why we pass number of times

##with the use of show function we display the graph
"""

from matplotlib import pyplot as plt      ##Code for importing matplotlib
from matplotlib import style              ## For data manipulation

style.use("ggplot")

plt.figure(figsize=(8,5))
plt.bar(list(ipl['player_of_match'].value_counts()[0:5].keys()),list(ipl['player_of_match'].value_counts()[0:5]),color="g")
plt.show()

"""If we get unexpected EOF while parsing error:

The SyntaxError: unexpected EOF while parsing means that the end of your source code was reached before all code blocks were completed. A code block starts with a statement like for i in range(100): and requires at least one line afterwards that contains code that should be in it.

It seems like you were executing your program line by line in the ipython console. This works for single statements like a = 3 but not for code blocks like for loops. See the following example:

## Getting the frequency of our result column

That is here we get the result of each match wheather they are normal or tie or no result
"""

ipl['result'].value_counts()

"""## Finding out the number of toss wins w.r.t each team"""

ipl['toss_winner'].value_counts()  ## here we use value counts method

"""## Extracting the records where a team won the match after selecting batting first

That means if they won the match than the value of runs are never zero and we will store in batting_first name object

and get the output by head function 
"""

batting_first=ipl[ipl['win_by_runs']!=0] 
batting_first.head()

"""## MAKING A HISTOGRAM

Histogram generally use when we have ti visualize numerical values
"""

plt.figure(figsize=(5,5))  ## To give figure size
plt.hist(batting_first['win_by_runs'])  ## Function to create histogram
plt.title("Distributing of Runs")
plt.xlabel("Runs")
plt.show()

"""#Finding out the number of wins w.r.t each team after batting first

The team who choose batting and wins the match
"""

batting_first['winner'].value_counts()

"""#Making a bar-plot for top 3 teams with most wins after batting first

where :
1. using batting_first['winner'].value_counts()[0:3].keys() gives the name of the top 3 teams who won the batch after batting
2. list(batting_first['winner'].value_counts()[0:3]).
gives the list of the values
"""

plt.figure(figsize=(6,6))
plt.bar(list(batting_first['winner'].value_counts()[0:3].keys()),list(batting_first['winner'].value_counts()[0:3]),color=["blue","yellow","orange"])
plt.show()

"""## MAKING OF PIE CHART

To find the win percentage difference between the teams who are wining the match to visualize it we use pie chart
"""

plt.figure(figsize=(7,7))
plt.pie(list(batting_first['winner'].value_counts()), labels=list(batting_first['winner'].value_counts().keys()), autopct='%0.1f%%')
plt.show()

"""#Extracting those records where a team has won after batting second 

Those teams who who won the match which choose balling after toss and second batting.
here we use win_by_wickets
"""

batting_second=ipl[ipl['win_by_wickets']!=0]
batting_second.head()

"""##MAKING OF HISTOGRAM

histogram for frquency for wins w.r.t number od wickets
"""

plt.figure(figsize=(5,5))
plt.hist(batting_second['win_by_wickets'],bins=30)
plt.show()

"""##Finding out the frequency of number of wins w.r.t each time after batting second

teams who win most matches after second batting
"""

batting_second['winner'].value_counts()

"""## MAKING A BAR PLOT FOR TOP-3 TEAMS WITH MOST WINS AFTER BATTING SECONDS"""

plt.figure(figsize=(7,7))
plt.bar(list(batting_second['winner'].value_counts()[0:3].keys()),list(batting_second['winner'].value_counts()[0:3]),color=["purple","blue","red"])
plt.show()

"""##MAKING A PIE CHART 
FOR DISTRIBUTION OF MOST WINS AFTER BATTING SECOND
"""

plt.figure(figsize=(7,7))
plt.pie(list(batting_second['winner'].value_counts()), labels=list(batting_second['winner'].value_counts().keys()), autopct='%0.1f%%')
plt.show()

"""LOOKING AT THE NUMBER OF MATCHES PLAYED EACH SEASON 
This will shows the years and match done the following year
"""

ipl['season'].value_counts()

"""LOOKING AT THE NUMBER OF MATCHES PLAYED IN EACH CITY
This will show the number of matches done in respected cities
"""

ipl['city'].value_counts()

"""FINDING RELATION BETWEEN WINNING TOSS AND WINNING MATCH

To find wheather there is any relation  between wining toss and winning the same match

Here we compare how many times toss_winner are same as match winner if they are same then it will return true and we count number of trues.

And then find its percentage by dividing number of trues by total number of matches
This will show much percentage is there if you won toss you win match
"""

import numpy as np
np.sum(ipl['toss_winner']==ipl['winner'])

np.sum(ipl['toss_winner']==ipl['winner'])/636

"""Find all the unique matches 

using the unique() we find the unique id the matches
"""

ipl['id'].unique()

"""Only to fouces on first match"""

match_1=ipl[ipl['id']==1]
match_1.head()

match_1.shape